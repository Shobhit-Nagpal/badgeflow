// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tickets.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTicketForEvent = `-- name: CreateTicketForEvent :one
INSERT INTO tickets 
  (id, created_at, updated_at, name, description, price, quantity, on_sale, event_id) 
VALUES 
  ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, name, description, price, quantity, on_sale, event_id
`

type CreateTicketForEventParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description sql.NullString
	Price       string
	Quantity    int32
	OnSale      bool
	EventID     uuid.UUID
}

func (q *Queries) CreateTicketForEvent(ctx context.Context, arg CreateTicketForEventParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicketForEvent,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.OnSale,
		arg.EventID,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.OnSale,
		&i.EventID,
	)
	return i, err
}

const getTicketsByEvent = `-- name: GetTicketsByEvent :many
SELECT id, created_at, updated_at, name, description, price, quantity, on_sale, event_id FROM tickets
WHERE event_id = $1
`

func (q *Queries) GetTicketsByEvent(ctx context.Context, eventID uuid.UUID) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.OnSale,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
