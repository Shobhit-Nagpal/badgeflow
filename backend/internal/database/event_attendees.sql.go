// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_attendees.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEventAttendee = `-- name: CreateEventAttendee :one
INSERT INTO event_attendees 
  (id, created_at, updated_at, event_id, attendee_id) 
VALUES 
  ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, event_id, attendee_id
`

type CreateEventAttendeeParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	EventID    uuid.UUID
	AttendeeID uuid.UUID
}

func (q *Queries) CreateEventAttendee(ctx context.Context, arg CreateEventAttendeeParams) (EventAttendee, error) {
	row := q.db.QueryRowContext(ctx, createEventAttendee,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.EventID,
		arg.AttendeeID,
	)
	var i EventAttendee
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventID,
		&i.AttendeeID,
	)
	return i, err
}

const getAttendeesByEvent = `-- name: GetAttendeesByEvent :many
SELECT id, created_at, updated_at, event_id, attendee_id FROM event_attendees 
WHERE event_id = $1
`

func (q *Queries) GetAttendeesByEvent(ctx context.Context, eventID uuid.UUID) ([]EventAttendee, error) {
	rows, err := q.db.QueryContext(ctx, getAttendeesByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventAttendee
	for rows.Next() {
		var i EventAttendee
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EventID,
			&i.AttendeeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
