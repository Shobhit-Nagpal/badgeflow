// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
  id, 
  name, 
  created_at, 
  scheduled_at, 
  user_id
) 
VALUES (
  $1, 
  $2, 
  $3, 
  $4, 
  $5
)
`

type CreateEventParams struct {
	ID          uuid.UUID
	Name        string
	CreatedAt   time.Time
	ScheduledAt time.Time
	UserID      string
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.ScheduledAt,
		arg.UserID,
	)
	return err
}

const getEventsByUserID = `-- name: GetEventsByUserID :many
SELECT id, name, created_at, scheduled_at, user_id FROM events
WHERE user_id = $1
`

func (q *Queries) GetEventsByUserID(ctx context.Context, userID string) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
