/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardEventsIndexImport } from './routes/dashboard/events/index'
import { Route as DashboardEventsEventIdImport } from './routes/dashboard/events/$eventId'
import { Route as DashboardEventsEventIdIndexImport } from './routes/dashboard/events/$eventId/index'
import { Route as DashboardEventsEventIdAttendeesImport } from './routes/dashboard/events/$eventId/attendees'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEventsIndexRoute = DashboardEventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEventsEventIdRoute = DashboardEventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEventsEventIdIndexRoute =
  DashboardEventsEventIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardEventsEventIdRoute,
  } as any)

const DashboardEventsEventIdAttendeesRoute =
  DashboardEventsEventIdAttendeesImport.update({
    id: '/attendees',
    path: '/attendees',
    getParentRoute: () => DashboardEventsEventIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/events/$eventId': {
      id: '/dashboard/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/dashboard/events/$eventId'
      preLoaderRoute: typeof DashboardEventsEventIdImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/events/': {
      id: '/dashboard/events/'
      path: '/events'
      fullPath: '/dashboard/events'
      preLoaderRoute: typeof DashboardEventsIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/events/$eventId/attendees': {
      id: '/dashboard/events/$eventId/attendees'
      path: '/attendees'
      fullPath: '/dashboard/events/$eventId/attendees'
      preLoaderRoute: typeof DashboardEventsEventIdAttendeesImport
      parentRoute: typeof DashboardEventsEventIdImport
    }
    '/dashboard/events/$eventId/': {
      id: '/dashboard/events/$eventId/'
      path: '/'
      fullPath: '/dashboard/events/$eventId/'
      preLoaderRoute: typeof DashboardEventsEventIdIndexImport
      parentRoute: typeof DashboardEventsEventIdImport
    }
  }
}

// Create and export the route tree

interface DashboardEventsEventIdRouteChildren {
  DashboardEventsEventIdAttendeesRoute: typeof DashboardEventsEventIdAttendeesRoute
  DashboardEventsEventIdIndexRoute: typeof DashboardEventsEventIdIndexRoute
}

const DashboardEventsEventIdRouteChildren: DashboardEventsEventIdRouteChildren =
  {
    DashboardEventsEventIdAttendeesRoute: DashboardEventsEventIdAttendeesRoute,
    DashboardEventsEventIdIndexRoute: DashboardEventsEventIdIndexRoute,
  }

const DashboardEventsEventIdRouteWithChildren =
  DashboardEventsEventIdRoute._addFileChildren(
    DashboardEventsEventIdRouteChildren,
  )

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardEventsEventIdRoute: typeof DashboardEventsEventIdRouteWithChildren
  DashboardEventsIndexRoute: typeof DashboardEventsIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardEventsEventIdRoute: DashboardEventsEventIdRouteWithChildren,
  DashboardEventsIndexRoute: DashboardEventsIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/events/$eventId': typeof DashboardEventsEventIdRouteWithChildren
  '/dashboard/events': typeof DashboardEventsIndexRoute
  '/dashboard/events/$eventId/attendees': typeof DashboardEventsEventIdAttendeesRoute
  '/dashboard/events/$eventId/': typeof DashboardEventsEventIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/events': typeof DashboardEventsIndexRoute
  '/dashboard/events/$eventId/attendees': typeof DashboardEventsEventIdAttendeesRoute
  '/dashboard/events/$eventId': typeof DashboardEventsEventIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/events/$eventId': typeof DashboardEventsEventIdRouteWithChildren
  '/dashboard/events/': typeof DashboardEventsIndexRoute
  '/dashboard/events/$eventId/attendees': typeof DashboardEventsEventIdAttendeesRoute
  '/dashboard/events/$eventId/': typeof DashboardEventsEventIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/about'
    | '/dashboard/'
    | '/dashboard/events/$eventId'
    | '/dashboard/events'
    | '/dashboard/events/$eventId/attendees'
    | '/dashboard/events/$eventId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/dashboard'
    | '/dashboard/events'
    | '/dashboard/events/$eventId/attendees'
    | '/dashboard/events/$eventId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/about'
    | '/dashboard/'
    | '/dashboard/events/$eventId'
    | '/dashboard/events/'
    | '/dashboard/events/$eventId/attendees'
    | '/dashboard/events/$eventId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/",
        "/dashboard/events/$eventId",
        "/dashboard/events/"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/events/$eventId": {
      "filePath": "dashboard/events/$eventId.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/events/$eventId/attendees",
        "/dashboard/events/$eventId/"
      ]
    },
    "/dashboard/events/": {
      "filePath": "dashboard/events/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/events/$eventId/attendees": {
      "filePath": "dashboard/events/$eventId/attendees.tsx",
      "parent": "/dashboard/events/$eventId"
    },
    "/dashboard/events/$eventId/": {
      "filePath": "dashboard/events/$eventId/index.tsx",
      "parent": "/dashboard/events/$eventId"
    }
  }
}
ROUTE_MANIFEST_END */
